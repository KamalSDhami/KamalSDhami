name: Update README with Latest Repo

on:
  schedule:
    - cron: "0 */6 * * *" # every 6 hours
  workflow_dispatch:
  push:
    branches: [ dev ]
    paths:
      - README.md
      - .github/workflows/update-readme.yml

permissions:
  contents: write  # allow workflow to push changes to the repo

jobs:
  update-readme:
    # Avoid infinite loops when the bot commits the README
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    env:
      GH_USER: ${{ github.repository_owner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure dependencies (jq)
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi

      - name: Get latest repo and update README
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          USER="${GH_USER}"
          echo "Fetching latest repo for user: ${USER}"

          # Get the latest non-archived, non-fork repository excluding the profile repo itself
          LATEST=$(curl -fsSL \
            -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/users/${USER}/repos?sort=updated&direction=desc&per_page=100" \
            | jq -r --arg prof "${USER}" '[ .[] | select((.archived==false) and (.fork==false) and (.name != $prof)) ][0].name')
          echo "Latest repository: $LATEST"

          if [ -z "${LATEST}" ] || [ "${LATEST}" = "null" ]; then
            echo "Error: Could not fetch latest repository name"
            exit 1
          fi

          # Strategy A: If placeholder exists, replace it
          if grep -q "{{LATEST_REPO}}" README.md; then
            sed -i "s/{{LATEST_REPO}}/${LATEST}/g" README.md
            echo "Replaced placeholder with ${LATEST}"
          else
            # Strategy B: Otherwise, update the existing Markdown link line in-place
            # Replace any line that links to github.com/KamalSDhami/<something> in the Latest section
            # Pattern: ‚û°Ô∏è [`NAME`](https://github.com/KamalSDhami/NAME)
            # Use a safe delimiter and basic regex to avoid locale issues with special chars
            sed -i -E "s#(‚û°Ô∏è \[`)[^\`]+(\`\]\(https://github.com/KamalSDhami/)[^)]+(\))#\1${LATEST}\2${LATEST}\3#" README.md || true
            echo "Updated existing latest repo link to ${LATEST}"
          fi

          # Show the updated content for verification
          echo "Updated section around 'Latest project':"
          grep -n -A 3 -B 3 "Latest project" README.md || true

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Get the latest repo name again for commit message
          USER="${GH_USER}"
          LATEST=$(curl -fsSL \
            -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/users/${USER}/repos?sort=updated&direction=desc&per_page=100" \
            | jq -r --arg prof "${USER}" '[ .[] | select((.archived==false) and (.fork==false) and (.name != $prof)) ][0].name')
          
          git add README.md
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "ü§ñ Auto-update: Latest repository is now $LATEST"
            BRANCH="${{ github.ref_name }}"
            # push to the same branch the workflow was triggered from
            git push origin HEAD:"${BRANCH}"
            echo "Successfully pushed changes"
          fi
